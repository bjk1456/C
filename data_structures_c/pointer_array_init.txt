
 Initialization of Pointer Arrays
Consider the problem of writing a function month_name(n) , which returns a pointer to a character string containing the name of the n-th month. This is an ideal application for an internal static array. month_name contains a private array of character strings, and returns a pointer to the proper one when called. The topic of this section is how that array of names is initialized.

The syntax is quite similar to previous initializations:

EditCopyc_109_01char *month_name(n) /* return name of n-th month */
int n;
{
  static char *name[] = {
    "illegal month",
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  };

  return((n < 1 || n > 12) ? name[0] : name[n]);
}
The declaration of name, which is an array of character pointers, is the same as lineptr in the sorting example. The initializer is simply a list of character strings; each is assigned to the corresponding position in the array. More precisely, the characters of the i-th string are placed somewhere else, and-a pointer to them is stored in name[i]. Since the size of the array name is not specified, the compiler itself counts the initializers and fills in the correct number.